'use client'

import { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { GoogleGenerativeAI } from "@google/generative-ai"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Slider } from "@/components/ui/slider"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Camera, ImageIcon, Send, Settings, Sparkles, Moon, Sun, Loader2, Palette, Wand2, Key } from 'lucide-react'

export default function Component() {
  const [apiKey, setApiKey] = useState('')
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [imagePrompt, setImagePrompt] = useState('')
  const [darkMode, setDarkMode] = useState(false)
  const [fontSize, setFontSize] = useState(16)
  const [isLoading, setIsLoading] = useState(false)
  const [progress, setProgress] = useState(0)
  const chatRef = useRef(null)
  const [genAI, setGenAI] = useState(null)
  const [activeTab, setActiveTab] = useState('chat')

  useEffect(() => {
    if (apiKey) {
      const newGenAI = new GoogleGenerativeAI(apiKey)
      setGenAI(newGenAI)
    }
  }, [apiKey])

  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight
    }
  }, [messages])

  useEffect(() => {
    document.body.classList.toggle('dark', darkMode)
  }, [darkMode])

  const sendMessage = async () => {
    if (input.trim() && genAI) {
      setIsLoading(true)
      const userMessage = { type: 'user', content: input }
      setMessages(prev => [...prev, userMessage])
      setInput('')

      try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" })
        const result = await model.generateContent(input)
        const response = await result.response
        const text = response.text()
        const aiMessage = { type: 'ai', content: text }
        setMessages(prev => [...prev, aiMessage])
      } catch (error) {
        console.error('Error sending message:', error)
        const errorMessage = { type: 'ai', content: 'Sorry, there was an error processing your request.' }
        setMessages(prev => [...prev, errorMessage])
      } finally {
        setIsLoading(false)
      }
    }
  }

  const sendImage = async (e) => {
    if (e.target.files && e.target.files[0] && genAI) {
      setIsLoading(true)
      const file = e.target.files[0]
      const reader = new FileReader()

      reader.onloadend = async () => {
        const userMessage = { type: 'user', content: 'Image uploaded', image: reader.result }
        setMessages(prev => [...prev, userMessage])

        try {
          const model = genAI.getGenerativeModel({ model: "gemini-pro-vision" })
          const imageParts = [
            {
              inlineData: {
                data: reader.result.split(',')[1],
                mimeType: file.type
              }
            }
          ]
          const result = await model.generateContent(["Analyze this image", ...imageParts])
          const response = await result.response
          const text = response.text()
          const aiMessage = { type: 'ai', content: text }
          setMessages(prev => [...prev, aiMessage])
        } catch (error) {
          console.error('Error analyzing image:', error)
          const errorMessage = { type: 'ai', content: 'Sorry, there was an error analyzing the image.' }
          setMessages(prev => [...prev, errorMessage])
        } finally {
          setIsLoading(false)
        }
      }

      reader.readAsDataURL(file)
    }
  }

  const generateImage = async () => {
    if (imagePrompt.trim() && genAI) {
      setIsLoading(true)
      setProgress(0)
      const interval = setInterval(() => {
        setProgress(prev => (prev < 90 ? prev + 10 : prev))
      }, 500)

      try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" })
        const result = await model.generateContent(
          `Generate a detailed description for an image based on this prompt: ${imagePrompt}`
        )
        const response = await result.response
        const text = response.text()
        const placeholderImage = `https://placehold.co/600x400/3b82f6/ffffff/png?text=${encodeURIComponent(imagePrompt)}`
        const aiMessage = { 
          type: 'ai', 
          content: `Image generated based on your prompt: ${text}`, 
          image: placeholderImage,
          isImageDescription: true 
        }
        setMessages(prev => [...prev, aiMessage])
        setImagePrompt('')
      } catch (error) {
        console.error('Error generating image description:', error)
        const errorMessage = { type: 'ai', content: 'Sorry, there was an error generating the image description.' }
        setMessages(prev => [...prev, errorMessage])
      } finally {
        clearInterval(interval)
        setProgress(100)
        setTimeout(() => {
          setIsLoading(false)
          setProgress(0)
        }, 500)
      }
    }
  }

  const addApiKey = () => {
    if (apiKey.trim()) {
      const newGenAI = new GoogleGenerativeAI(apiKey.trim())
      setGenAI(newGenAI)
      setMessages(prev => [...prev, { type: 'system', content: 'API Key added successfully!' }])
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-4">
      <Card className="w-full max-w-md mx-auto overflow-hidden bg-white/80 dark:bg-gray-800/80 backdrop-blur-md shadow-2xl rounded-2xl">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex flex-col h-[90vh]"
        >
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-4 text-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Sparkles className="h-6 w-6 mr-2" />
                <h1 className="text-xl font-bold">Gemini Designer AI</h1>
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setDarkMode(!darkMode)}
                className="text-white hover:text-blue-200"
              >
                {darkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </Button>
            </div>
            <div className="mt-4 flex space-x-2">
              <Input
                type="password"
                placeholder="Enter Gemini API Key"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                className="flex-grow bg-white/20 text-white placeholder-blue-200"
              />
              <Button onClick={addApiKey} className="bg-white text-blue-500 hover:bg-blue-100">
                <Key className="h-4 w-4 mr-2" />
                Add Key
              </Button>
            </div>
          </div>

          {/* Main Content */}
          <Tabs value={activeTab} className="flex-1 flex flex-col">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="chat" onClick={() => setActiveTab('chat')}>
                <Send className="h-4 w-4 mr-2" />
                Chat
              </TabsTrigger>
              <TabsTrigger value="image" onClick={() => setActiveTab('image')}>
                <ImageIcon className="h-4 w-4 mr-2" />
                Image
              </TabsTrigger>
              <TabsTrigger value="settings" onClick={() => setActiveTab('settings')}>
                <Settings className="h-4 w-4 mr-2" />
                Settings
              </TabsTrigger>
            </TabsList>
            <TabsContent value="chat" className="flex-1 flex flex-col p-4 overflow-hidden">
              <ScrollArea className="flex-1 pr-4" ref={chatRef}>
                <AnimatePresence>
                  {messages.map((msg, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      transition={{ duration: 0.3 }}
                      className={`flex mb-4 ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`flex items-start space-x-2 ${msg.type === 'user' ? 'flex-row-reverse' : ''}`}>
                        <Avatar className={msg.type === 'user' ? 'bg-blue-500' : msg.type === 'system' ? 'bg-green-500' : 'bg-purple-500'}>
                          <AvatarFallback>{msg.type === 'user' ? 'U' : msg.type === 'system' ? 'S' : 'AI'}</AvatarFallback>
                        </Avatar>
                        <div className={`p-3 rounded-lg max-w-[80%] ${
                          msg.type === 'user' ? 'bg-blue-500 text-white' : 
                          msg.type === 'system' ? 'bg-green-500 text-white' : 
                          'bg-gray-100 dark:bg-gray-700'
                        } shadow-md`}>
                          {msg.image && <img src={msg.image} alt="Uploaded or Generated" className="max-w-full mb-2 rounded" />}
                          <p className={msg.type === 'user' || msg.type === 'system' ? 'text-white' : 'text-gray-800 dark:text-gray-200'}>
                            {msg.content}
                          </p>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </ScrollArea>
              <div className="flex items-center space-x-2 mt-4">
                <Textarea
                  placeholder="Type your message..."
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  className="flex-grow"
                />
                <Button onClick={sendMessage} disabled={isLoading || !genAI} className="bg-blue-500 hover:bg-blue-600">
                  {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                </Button>
                <Button as="label" htmlFor="imageUpload" disabled={isLoading || !genAI} className="bg-green-500 hover:bg-green-600">
                  <Camera className="h-4 w-4" />
                  <input
                    id="imageUpload"
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={sendImage}
                    disabled={isLoading || !genAI}
                  />
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="image" className="flex-1 flex flex-col p-4">
              <div className="flex-1 flex flex-col justify-center items-center space-y-4">
                <div className="w-full">
                  <Label htmlFor="imagePrompt" className="text-lg font-semibold mb-2 block">
                    Describe the image you want to generate
                  </Label>
                  <Textarea
                    id="imagePrompt"
                    placeholder="A futuristic cityscape with flying cars and neon lights..."
                    value={imagePrompt}
                    onChange={(e) => setImagePrompt(e.target.value)}
                    className="min-h-[100px]"
                  />
                </div>
                <Button
                  onClick={generateImage}
                  className="w-full bg-purple-500 hover:bg-purple-600"
                  disabled={isLoading || !genAI}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
                      Generating Image...
                    </>
                  ) : (
                    <>
                      <ImageIcon className="h-4 w-4 mr-2" />
                      Generate Image
                    </>
                  )}
                </Button>
                {isLoading && (
                  <div className="w-full">
                    <Progress value={progress} className="w-full" />
                    <p className="text-center mt-2">{progress}% Complete</p>
                  </div>
                )}
              </div>
            </TabsContent>
            <TabsContent value="settings" className="flex-1 p-4">
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="font-size" className="text-lg font-semibold flex items-center justify-between">
                    <span>Font Size</span>
                    <span>{fontSize}px</span>
                  </Label>
                  <Slider
                    id="font-size"
                    min={12}
                    max={24}
                    step={1}
                    value={[fontSize]}
                    onValueChange={(value) => setFontSize(value[0])}
                    className="w-full"
                  />
                </div>
                <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
                  <h3 className="text-lg font-semibold mb-2">Keyboard Shortcuts</h3>
                  <ul className="space-y-2">
                    <li className="flex justify-between">
                      <span>Send Message</span>
                      <kbd className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded">Enter</kbd>
                    </li>
                    <li className="flex justify-between">
                      <span>New Line</span>
                      <kbd className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded">Shift + Enter</kbd>
                    </li>
                    <li className="flex justify-between">
                      <span>Clear Chat</span>
                      <kbd className="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded">Ctrl + L</kbd>
                    </li>
                  </ul>
                </div>
              </div>
            </TabsContent>
          </Tabs>

          {/* Footer */}
          <div className="bg-gray-100 dark:bg-gray-800 p-4 flex justify-between items-center">
            <Button variant="outline" size="sm">
              <Palette className="h-4 w-4 mr-2" />
              New Design
            </Button>
            <Button variant="outline" size="sm">
              <Wand2 className="h-4 w-4 mr-2" />
              AI Suggestions
            </Button>
          </div>
        </motion.div>
      </Card>
    </div>
  )
}